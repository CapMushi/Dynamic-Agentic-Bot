# Backend Development Guidelines

## LangGraph Architecture
- Implement all 8 nodes with proper state management
- Router Node: Routes queries to correct node(s) based on intent classification
- Doc Node: Uses Pinecone and OCR to retrieve documents with page number and image
- DB Node: Runs SQL queries for historical data like prices
- Math Node: Handles computation-heavy queries such as moving average calculations
- Persona Selector: Routes request to appropriate LLM or persona backend
- Suggestion Node: Generates follow-up query suggestions to maintain flow
- Answer Formatter: Adds metadata and screenshot into final answer

## API Design
- Create comprehensive API contracts that match frontend expectations
- Implement proper error handling and recovery mechanisms
- Use FastAPI for REST API endpoints
- Implement WebSocket for real-time communication

## Data Processing
- Implement vector database integration with Pinecone
- Create document chunking and indexing system
- Build OCR system for PDF screenshot extraction
- Handle mathematical operations in dedicated Python nodes

## Integration Strategy
- Use environment variables to toggle between mock and real APIs
- Implement service layer that can switch between mock and real data
- Plan for gradual migration from mock to real data
- Maintain API contract consistency throughout development

alwaysApply: false